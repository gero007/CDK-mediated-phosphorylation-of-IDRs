library(ggridges)
library(hrbrthemes)
library(ggrepel)
library(ggsci)
library(scales)
# load the function for obtaining disorder metrics from diferent predictors
source("auxiliary_functions/getDisorder_V2.R")
# load function to generate contingency tables from phosphorylation data
source("auxiliary_functions/contingencyTablesAnalysis_V2.R")
#################################
######## Disorder data ##########
#################################
# ___________Disorder_____________
# YEAST
yeastDiso<-stream_in(con = file("disorder_data/MobiDB/yeast_mobiDB_full.mjson"),verbose = F)
yeastDiso$mobidb_data <- yeastDiso$mobidb_data$disorder
colnames(yeastDiso)[2] <- "disorder"
yeast_uniprot_table <- read_delim("swiss_prot/yeast_UniprotID_reviewed.tab", "\t", escape_double = FALSE, trim_ws = TRUE)
yeast_uniprot_table <- read_delim("uniprot_data/yeast_UniprotID_reviewed.tab", "\t", escape_double = FALSE, trim_ws = TRUE)
yeastDiso <- merge.data.frame(yeastDiso,yeast_uniprot_table,by.x = "acc",by.y = "Entry")
yeastDiso_full <- getMobiDB_PredDiso(yeastDiso,"acc",sequence_col = "Sequence")
yeastDiso_full <- getMobiDB_PredDiso(yeastDiso,"acc",sequence_col = "Sequence")
## addd SPOT
yeastDiso_full <- getSpotPredDiso(yeastDiso_full,disoPath = "predictions/spot_run_yeast/",accession_col = "acc",length_col = "Length",sequence_col = "Sequence")
yeastDiso_full$spot_disoIndexes
# HUMAN
humanDiso<-stream_in(con = file("disorder_data/MobiDB/HS_mobiDB_full.mjson"),verbose = F)
humanDiso<-stream_in(con = file("disorder_data/MobiDB/HS_mobiDB_full.mjson"),verbose = F)
humanDiso$mobidb_data <- humanDiso$mobidb_data$disorder
colnames(humanDiso)[2] <- "disorder"
human_uniprot_table <- read_delim("uniprot_data/HS_UniprotID_reviewed.tab", "\t", escape_double = FALSE, trim_ws = TRUE)
humanDiso <- merge.data.frame(humanDiso,human_uniprot_table,by.x = "acc",by.y = "Entry")
# the entry number 3972 in mobidb is broken. I remove it now
humanDiso <- humanDiso[-3971,]
humanDiso_full <- getMobiDB_PredDiso(humanDiso,"acc",sequence_col = "Sequence")
humanDiso_full <- getSpotPredDiso(humanDiso_full,disoPath = "disorder_data/local_predictions/spot_run_human/",accession_col = "acc",length_col = "Length",sequence_col = "Sequence")
# Load Xenopus non-redundant sequence database used for proteomic approaches
xenopus_MPI<-readAAStringSet("MPI_xenopus_database/Xenopus_Database_MPI.FASTA",format = "fasta")
xenopusDiso<-as.data.frame(xenopus_MPI)
colnames(xenopusDiso)<-"Sequence"
xenopusDiso$ID <- str_extract(names(xenopus_MPI), regex( "(?<=\\|)(.*)"))
row.names(xenopusDiso) <- NULL
xenopusDiso$Length <-nchar(xenopusDiso$Sequence)
# The ID mapping between Uniprot and MPI databases can be complex. That rules out the utilization of MobiDB as a disorder information source. For xenopus we calculate manually the values of disorder for its entire proteome using 3 predictors
xenopusDiso <- getIUpredPredDiso(df = xenopusDiso,disoPath = "disorder_data/local_predictions/IUpred_run_xenopus/",sequence_col = "Sequence",accession_col = "ID",length_col = "Length")
xenopusDiso <- getVSLPredDiso(df = xenopusDiso,disoPath = "disorder_data/local_predictions/VSL2b_run_xenopus//",sequence_col = "Sequence",accession_col = "ID",length_col = "Length")
xenopusDiso <- getSpotPredDiso(df = xenopusDiso,disoPath = "disorder_data/local_predictions/spot_run_xenopus/",sequence_col = "Sequence",accession_col = "ID",length_col = "Length")
ubersax_data <- read_delim("phosphorylation_data/Ubersax_CDK1targetSCereviseae.csv",
"\t", quote = "\\\"", escape_double = FALSE,
col_types = cols(X1 = col_skip(), input = col_skip(),
`yourlist:M201907046746803381A1F0E0DB47453E0216320D4B0BD1N` = col_skip()),
trim_ws = TRUE)
# Now the comumn "disorder" is a unnamed list with a complex structure for each row of the data frame
#The row 294 cannot be mapped with the uniprot, I will remove it from CDK1targetsSacCer and yeastDisoCDK1target. Slect only the rows wuth P-score > 2 most likely targets based on the paper
ubersax_data<-ubersax_data[-294,]
# ubersax_data <- merge.data.frame(ubersax_data,yeastDiso_full,by.x = "Entry",by.y = "acc")
# After the merging 7 uncharacterized protein are left out the dataset. n=680
# SPOT
# Not for now
# ubersax_data$dbDisoPerc <- yeastDiso_ubersax_subset$dbDisoPerc
# ubersax_data$predSpotDisoPerc <- yeastDiso_ubersax_subset$predSpotDisoPerc
# ubersax_data$target<-cut(ubersax_data$`P-Score`,breaks = c(2),labels = c("Non Cdk1 target","Cdk1 target"))
ubersax_data$target<-cut(ubersax_data$`P-Score`,breaks = c(-Inf,2,Inf),labels = c("Non Cdk1 target","Cdk1 target"),right = F)
ubersax_data$target <- relevel(factor(ubersax_data$target),"Cdk1 target")
ubersax_data$targetStrict<-cut(ubersax_data$`P-Score`,breaks = c(-Inf,3,Inf),labels = c("Non Cdk1 target","Cdk1 target"),right = F)
ubersax_data$targetStrict <- relevel(factor(ubersax_data$targetStrict),"Cdk1 target")
## ___________Holt Data_____________
uniprot_yeast <- read_delim("uniprot_data/uniprot_yeast.tab",
"\t", escape_double = FALSE, trim_ws = TRUE)
holt_MS <- read_delim("phosphorylation_data/Holt_CDK1target_SPombe.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#Remove phosphoTyrosines
holt_MS<-subset(holt_MS,!substr(site,start = 1,stop = 1)=="Y")
#Add Uniprot accesion. 58 entries lost (out of 9067) due to ID conversion
holt_MS <- holt_MS[which(holt_MS$ORF %in% uniprot_yeast$OLN),]
holt_MS$Uniprot <- uniprot_yeast$`Swiss-Prot-AC`[base::match(holt_MS$ORF,uniprot_yeast$OLN)]
# Create a new column indicating which sites are considered to be phosphorylated
holt_MS <- holt_MS %>% mutate(psite=case_when(
`log2H/L_asynchronous`<(-1)|`log2H/L_nocodazole`<(-1)|`log2H/L_clb2`<(-1) ~ " phosphorylated",
TRUE ~ " non phosphorylated"
))
holt_MS$psite <- factor(holt_MS$psite)
holt_MS$psite <- relevel(holt_MS$psite,ref = " phosphorylated")
# Create a new column indicating which sites are considered to be phosphorylated in an CDK consensus motif
holt_MS <- holt_MS %>% mutate(consensus_psite=case_when(
(`log2H/L_asynchronous`<(-1)|`log2H/L_nocodazole`<(-1)|`log2H/L_clb2`<(-1)) & grepl("[st]P",centered_15mer) ~ " phosphorylated" ,
TRUE ~ " non phosphorylated"
))
holt_MS$consensus_psite <- factor(holt_MS$consensus_psite)
holt_MS$consensus_psite <- relevel(holt_MS$consensus_psite,ref = " phosphorylated")
# The summarise function substrings the sites for removing the first letter, indicating the residue. Since I have to apply the same function for all the columns to be summarized, I added an space at the beginning of the psite and psites values and like this I don't loose the first letter
# the columns site, psite, and psite consensus are merged in a string separated by commas and grouped by uniprot ID
holt_data <- holt_MS %>% group_by(Uniprot) %>% summarise_at(c("site","psite","consensus_psite"),function(x){paste(substring(x,2,1000), collapse=",")})
# Convert the psites and consensus_psite columns in target_all and target_consensus columns respectively. If one of the psites is phosphorylated by CDK thats consider a CDK target
holt_data <- holt_data %>% mutate(target_all=case_when(
grepl(psite,pattern = "(,|^)phosphorylated") ~ "Cdk1 target",
TRUE ~ "Non Cdk1 target"
))
holt_data <- holt_data %>% mutate(target_consensus=case_when(
grepl(consensus_psite,pattern = "(,|^)phosphorylated") ~ "Cdk1 target",
TRUE ~ "Non Cdk1 target"
))
# Tibble doesn't like list and vectors as values, it's easier to reconvert to DF
holt_data <- as.data.frame(holt_data)
# Select which psites are cdk psites with and withouth consensus
## site is a vector now
holt_data$site <- lapply(holt_data$site, function(x){as.numeric(strsplit(x,',')[[1]])})
## psite and consensus_psite are logical vectors with TRUE="phosphorylated" and FALSE="non phosphorylated"
holt_data$psite <- lapply(holt_data$psite, function(x){strsplit(x,',')[[1]]=="phosphorylated"})
holt_data$consensus_psite <- lapply(holt_data$consensus_psite, function(x){strsplit(x,',')[[1]]=="phosphorylated"})
psites <- list()
consensus_psites <- list()
for (i in 1:nrow(holt_data)) {
psites[[i]] <- holt_data$site[[i]][holt_data$psite[[i]]]
consensus_psites[[i]] <- holt_data$site[[i]][holt_data$consensus_psite[[i]]]
}
holt_data$psite <- psites
holt_data$consensus_psite <- consensus_psites
rm(psites,consensus_psites)
## ___________Intersection yeast_____________
# The universe is the union between Holt and Ubersax
yeastIntersect_All_data <- merge.data.frame(ubersax_data[,c("Entry","target","targetStrict")],
holt_data[,c("Uniprot","site","psite","consensus_psite","target_all","target_consensus")],
by.x = "Entry", by.y = "Uniprot",all = T)
yeastIntersect_All_data <- yeastIntersect_All_data %>% mutate(target_intersect=case_when(
((target=="Cdk1 target") & (target_all=="Cdk1 target")) ~ "Cdk1 target",
TRUE ~ "Non Cdk1 target"
)) %>% as.data.frame()
#####Add disorder to yeast DATA
# Ubersax
ubersax_data <- merge.data.frame(ubersax_data,yeastDiso_full,by.x = "Entry",by.y = "acc")
ubersax_data$MW_kDa<-(ubersax_data$Length*120)/1000
ubersax_data$nmol<- (ubersax_data$`Protein Level`/ubersax_data$MW_kDa)/1000
ubersax_data$nEq_STP<- ubersax_data$nmol*ubersax_data$`[ST]-P`
ubersax_data$nEq_STPXKR<- ubersax_data$nmol*ubersax_data$`[ST]-P-X-[KR]`
# 4 Entries are lost in the conversion, 2 of them target_all="CDK1 target"
# Holt
holt_data<-merge.data.frame(holt_data,yeastDiso_full,by.x = "Uniprot",by.y = "acc")
# adding number of consensus
holtMinCons <- sapply(holt_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(holtMinCons) <- NULL
holtFullCons <- sapply(holt_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P.[KR]",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(holtFullCons) <- NULL
holt_data$`[ST]-P-X-[KR]`<-holtFullCons
holt_data$`[ST]-P`<-holtMinCons
# Intersection
## add disorder MobiDB
yeastIntersect_All_data <- merge.data.frame(yeastIntersect_All_data,yeastDiso_full,by.x = "Entry",by.y = "acc")
yeastIntersect_CDK1_data <- subset(yeastIntersect_All_data, (target_all == "Cdk1 target") & (target=="Cdk1 target"))
human_data <- read_delim("phosphorylation_data/phosphositePlus_data/human_data_curated_V2_cleaned.tab",
"\t", escape_double = FALSE, col_types = cols(MOD_RSD = col_character()),
trim_ws = TRUE)
human_data$psite_CDK1 <- lapply(human_data$MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
human_data$target <- rep("Cdk1 target",nrow(human_data))
human_data$target <- as.factor(human_data$target)
# human_data <- human_data[,c("GENE","PROTEIN","ACC#","MOD_RSD","target","psite_CDK1","KINASE")]
## ___________Phosphosite Human Universe_____________
# Load all the phosphosites in the phosphosite plus database
human_universe_data <- read_delim("phosphorylation_data/phosphositePlus_data/Phosphorylation_site_dataset",
"\t", escape_double = FALSE, col_types = cols(HU_CHR_LOC = col_skip(),
SITE_GRP_ID = col_skip(), MW_kD = col_skip(),
DOMAIN = col_skip(), `SITE_+/-7_AA` = col_skip(),
LT_LIT = col_skip(), MS_LIT = col_skip(),
MS_CST = col_skip(), `CST_CAT#` = col_skip()),
trim_ws = TRUE)
human_universe_data<-reshape::rename(human_universe_data,c(ACC_ID="ACC#"))
# Select human proteins
human_universe_data <- subset(human_universe_data, ORGANISM == "human")
# Remove all information related to isoforms
human_universe_data <- subset(human_universe_data, !grepl("-",`ACC#`))
human_universe_data <- subset(human_universe_data, !grepl(" iso[0-9]",`PROTEIN`))
# Select targets with pS or pT
human_universe_data<-subset(human_universe_data,(substr(MOD_RSD,1,1)=="S"|substr(MOD_RSD,1,1)=="T"))
# format the MOD_RSD column and group by gene/protein/uniprot
human_universe_data <- human_universe_data %>% mutate(MOD_RSD=substr(MOD_RSD,1,nchar(MOD_RSD)-2))
human_universe_data <- human_universe_data %>% group_by(`ACC#`,GENE,PROTEIN) %>% summarise_at("MOD_RSD",function(x){paste(substr(x,2,2000), collapse=",")})
# Generate the psite column, with the vectors containing psites (for the contingency table analysis)
human_universe_data <- as.data.frame(human_universe_data)
human_universe_data$psite <- lapply(human_universe_data$MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
# merge the tables and mark CDK1 targets and non CDK1 targets. Only by ACC, protein names in human data are still with  the isoform nomenclature
human_data <- merge.data.frame(x = human_data,y = human_universe_data,by = c("ACC#"),all = T,suffixes = c("_CDK1","_ALL"))
#remove PROTEIN and GENE comumns from x, and rename the y columns
human_data$GENE_CDK1<-NULL
human_data$PROTEIN_CDK1<-NULL
human_data <- reshape::rename(human_data,c(PROTEIN_ALL="PROTEIN",GENE_ALL="GENE"))
# Adding the target category "Non Cdk1 target"
levels(human_data$target) <- c("Cdk1 target","Non Cdk1 target")
human_data$target[is.na(human_data$target)]<-"Non Cdk1 target"
human_data<-merge.data.frame(human_data,humanDiso_full,by.x = "ACC#",by.y = "acc")
#__________________________________________
# addition of human MAPK,AURK,PLK,NEK,DYRK
mapk_data <- read_delim("phosphorylation_data/phosphositePlus_data/MAPK/PSP_MAPK_Target_HS.tab",
"\t", escape_double = FALSE, col_types = cols(MAPK_MOD_RSD = col_character()),
trim_ws = TRUE)
mapk_data$psite_MAPK <- lapply(mapk_data$MAPK_MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
human_data<-merge.data.frame(human_data, mapk_data, by = c("GENE","PROTEIN","ACC#"),all.x = T)
human_data <- human_data %>% mutate(target_mapk=case_when(
!is.na(MAPK_MOD_RSD) ~ "mapk target",
TRUE ~ "Non mapk target"
))
aurk_data <- read_delim("phosphorylation_data/phosphositePlus_data/AURK/PSP-Gerber_data_curated_cleaned.tab",
"\t", escape_double = FALSE, col_types = cols(AURK_MOD_RSD = col_character()),
trim_ws = TRUE)
aurk_data$psite_aurk <- lapply(aurk_data$AURK_MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
human_data<-merge.data.frame(human_data, aurk_data, by = c("ACC#"),all.x = T)
human_data <- human_data %>% mutate(target_aurk=case_when(
!is.na(AURK_MOD_RSD) ~ "aurk target",
TRUE ~ "Non aurk target"
))
plk_data <- read_delim("phosphorylation_data/phosphositePlus_data/PLK//PSP-Gerber_data_curated_cleaned.tab",
"\t", escape_double = FALSE, col_types = cols(PLK_MOD_RSD = col_character()),
trim_ws = TRUE)
plk_data$psite_plk <- lapply(plk_data$PLK_MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
human_data<-merge.data.frame(human_data, plk_data, by = c("ACC#"),all.x = T)
human_data <- human_data %>% mutate(target_plk=case_when(
!is.na(PLK_MOD_RSD) ~ "plk target",
TRUE ~ "Non plk target"
))
nek_data <- read_delim("phosphorylation_data/phosphositePlus_data/NEK/PSP_NEK_Target_HS.tab",
"\t", escape_double = FALSE, col_types = cols(NEK_MOD_RSD = col_character()),
trim_ws = TRUE)
nek_data$psite_nek <- lapply(nek_data$NEK_MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
human_data<-merge.data.frame(human_data, nek_data, by = c("ACC#"),all.x = T)
human_data <- human_data %>% mutate(target_nek=case_when(
!is.na(NEK_MOD_RSD) ~ "nek target",
TRUE ~ "Non nek target"
))
dyrk_data <- read_delim("phosphorylation_data/phosphositePlus_data/DYRK/PSP_DYRK_Target_HS.tab",
"\t", escape_double = FALSE, col_types = cols(DYRK_MOD_RSD = col_character()),
trim_ws = TRUE)
dyrk_data$psite_dyrk <- lapply(dyrk_data$DYRK_MOD_RSD, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
human_data<-merge.data.frame(human_data, dyrk_data, by = c("ACC#"),all.x = T)
human_data <- human_data %>% mutate(target_dyrk=case_when(
!is.na(DYRK_MOD_RSD) ~ "dyrk target",
TRUE ~ "Non dyrk target"
))
xenopus_data <- read_delim("phosphorylation_data/Barrantes_data/all_phosphosites_xenopus_nr.tab", "\t", escape_double = FALSE, col_types = cols(`Leading proteins` = col_skip(), Protein = col_skip()), trim_ws = TRUE)
xenopus_data <- xenopus_data %>% dplyr::rename(ID=Proteins,psites=`Positions within proteins`,seqWindow=`Sequence window`,UID=`Unique identifier`) %>% group_by(ID) %>% summarise_at(c("psites","seqWindow","UID"),function(x){paste(x, collapse=",")})
xenopus_ANOVA_data <- read_delim("phosphorylation_data/Barrantes_data/Xen_phospho_AnovaPhosphosites_curated.txt","\t", escape_double = FALSE, trim_ws = TRUE)
xenopus_data <- merge.data.frame(xenopus_data,xenopusDiso,by = "ID")
clusterA <- read_lines(file = "phosphorylation_data/Barrantes_data/ids/xenopusclusterA_mpi.txt")
clusterB <- read_lines(file = "phosphorylation_data/Barrantes_data/ids/xenopusclusterB_mpi.txt")
clusterC <- read_lines(file = "phosphorylation_data/Barrantes_data/ids/xenopusclusterC_mpi.txt")
clusterD <- read_lines(file = "phosphorylation_data/Barrantes_data/ids/xenopusclusterD_mpi.txt")
humanCDKtargets <- read_lines(file = "phosphorylation_data/Barrantes_data/ids/humanCDKtargets_mpi.txt")
xenopus_data <- xenopus_data %>% mutate(cluster_A=case_when(
ID %in% clusterA ~ TRUE,
TRUE ~ FALSE
))
xenopus_data <- xenopus_data %>% mutate(cluster_B=case_when(
ID %in% clusterB ~ TRUE,
TRUE ~ FALSE
))
xenopus_data <- xenopus_data %>% mutate(cluster_C=case_when(
ID %in% clusterC ~ TRUE,
TRUE ~ FALSE
))
xenopus_data <- xenopus_data %>% mutate(cluster_D=case_when(
ID %in% clusterD ~ TRUE,
TRUE ~ FALSE
))
xenopus_data <- xenopus_data %>% mutate(ANOVA=case_when(
ID %in% clusterD ~ TRUE,
TRUE ~ FALSE
))
xenopus_data <- xenopus_data %>% mutate(ANOVA=case_when(
(cluster_A | cluster_B | cluster_C | cluster_D) ~ "Dynamic",
TRUE ~ "Non Dynamic"
))
xenopus_data <- xenopus_data %>% mutate(hCDKtarget=case_when(
ID %in% humanCDKtargets ~ TRUE,
TRUE ~ FALSE
))
xenopus_data$psites <- lapply(xenopus_data$psites, function(x){ return(as.numeric(strsplit(x,",")[[1]]))})
xenopus_data$UID <- lapply(xenopus_data$UID, function(x){ return(as.character(strsplit(x,",")[[1]]))})
xenopus_data$anova_psites <- apply(xenopus_data, 1, function(x){x$psites[x$UID %in% xenopus_ANOVA_data$UID]})
gc()
save.image("~/test.RData")
humanDiso
# Yeast predictors
yeastSpotIndexes_vec <- base::strsplit(yeastDiso_full$spot_disoIndexes,',')
yeastDiso_full
## addd SPOT
yeastDiso_full <- getSpotPredDiso(yeastDiso_full,disoPath = "disorder_data/local_predictions/spot_run_yeast/",accession_col = "acc",length_col = "Length",sequence_col = "Sequence")
yeastSpotIndexes_vec <- base::strsplit(yeastDiso_full$spot_disoIndexes,',')
# Yeast predictors
yeastSpotIndexes_vec <- base::strsplit(yeastDiso_full$spot_disoIndexes,',')
yeastSpotResidueIDs <- list()
for (i in 1:nrow(yeastDiso_full)) {
yeastSpotResidueIDs[[i]] <- paste(yeastDiso_full$acc[[i]],yeastSpotIndexes_vec[[i]],sep = "_")
}
yeastSpotResidueIDs<-unlist(yeastSpotResidueIDs)
yeastVslIndexes_vec <- base::strsplit(yeastDiso_full$vsl_disoIndexes,',')
yeastVslResidueIDs <- list()
for (i in 1:nrow(yeastDiso_full)) {
yeastVslResidueIDs[[i]] <- paste(yeastDiso_full$acc[[i]],yeastVslIndexes_vec[[i]],sep = "_")
}
yeastVslResidueIDs<-unlist(yeastVslResidueIDs)
yeastIUPredIndexes_vec <- base::strsplit(yeastDiso_full$iupl_disoIndexes,',')
yeastIUPredResidueIDs <- list()
for (i in 1:nrow(yeastDiso_full)) {
yeastIUPredResidueIDs[[i]] <- paste(yeastDiso_full$acc[[i]],yeastIUPredIndexes_vec[[i]],sep = "_")
}
yeastIUPredResidueIDs<-unlist(yeastIUPredResidueIDs)
yeast_sets <- list("IUPred"=yeastIUPredResidueIDs,"SPOT"=yeastSpotResidueIDs,"VSL2B"=yeastVslResidueIDs)
eulerr_options(fills=list(fill=c("#f69220ff","#fedd10ff","#2aabe2ff"),alpha=0.6))
plot(euler(yeast_sets, shape = "ellipse"), quantities = TRUE)
# Human predictors
humanSpotIndexes_vec <- base::strsplit(humanDiso_full$spot_disoIndexes,',')
humanSpotResidueIDs <- list()
for (i in 1:nrow(humanDiso_full)) {
humanSpotResidueIDs[[i]] <- paste(humanDiso_full$acc[[i]],humanSpotIndexes_vec[[i]],sep = "_")
}
humanSpotResidueIDs<-unlist(humanSpotResidueIDs)
humanVslIndexes_vec <- base::strsplit(humanDiso_full$vsl_disoIndexes,',')
humanVslResidueIDs <- list()
for (i in 1:nrow(humanDiso_full)) {
humanVslResidueIDs[[i]] <- paste(humanDiso_full$acc[[i]],humanVslIndexes_vec[[i]],sep = "_")
}
humanVslResidueIDs<-unlist(humanVslResidueIDs)
humanIUPredIndexes_vec <- base::strsplit(humanDiso_full$iupl_disoIndexes,',')
humanIUPredResidueIDs <- list()
for (i in 1:nrow(humanDiso_full)) {
humanIUPredResidueIDs[[i]] <- paste(humanDiso_full$acc[[i]],humanIUPredIndexes_vec[[i]],sep = "_")
}
humanIUPredResidueIDs<-unlist(humanIUPredResidueIDs)
human_sets <- list("IUPred"=humanIUPredResidueIDs,"SPOT"=humanSpotResidueIDs,"VSL2B"=humanVslResidueIDs)
eulerr_options(fills=list(fill=c("#f69220ff","#fedd10ff","#2aabe2ff"),alpha=0.6))
plot(euler(human_sets, shape = "ellipse"), quantities = TRUE)
##YEAST
yeastSeq_all<-yeastDiso$Sequence
names(yeastSeq_all)<-yeastDiso$acc
yeastSeq_all<-Biostrings::AAStringSet(yeastSeq_all)
yeastComp_all<-colSums(alphabetFrequency(yeastSeq_all))[1:20]/sum(colSums(alphabetFrequency(yeastSeq_all))[1:20])
######################Set the rainbow color palette for yeast #####################
colorPallete_YeastComp <- rainbow(20)
names(colorPallete_YeastComp) <- levels(reorder(names(yeastComp_all),-yeastComp_all))
########################################################################################
plotYeastComp <- ggplot()+geom_bar(aes(x=reorder(names(yeastComp_all),-yeastComp_all), fill=reorder(names(yeastComp_all),-yeastComp_all), y=yeastComp_all),stat="identity") + scale_fill_manual(values=colorPallete_YeastComp)+ theme_linedraw(base_size = 15) + theme(legend.position="none",axis.title.x =  element_blank(),axis.title.y =  element_blank(),panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank(),axis.ticks.y = element_blank(),axis.text.y = element_blank()) + scale_y_continuous(breaks = seq(0,0.1,0.025),limits = c(0,0.1)) + ggtitle("Proteome Composition")
##Iupred##
yeastSeqIupred_diso <- Biostrings::AAStringSet(yeastDiso_full$iupl_disoSeq)
yeastCompIupred<-colSums(alphabetFrequency(yeastSeqIupred_diso))[1:20]/sum(colSums(alphabetFrequency(yeastSeqIupred_diso))[1:20])
yeastIupredDiffComp <- sort((yeastCompIupred-yeastComp_all)/yeastComp_all,decreasing = T)
plotYeastIupred_DC <- ggplot()+geom_bar(aes(x=reorder(names(yeastIupredDiffComp),-yeastIupredDiffComp), fill=reorder(names(yeastIupredDiffComp),-yeastIupredDiffComp), y=yeastIupredDiffComp),stat="identity") + scale_fill_manual(values=colorPallete_YeastComp)+ theme_linedraw(base_size = 15) + theme(legend.position="none",axis.title.x =  element_blank(),axis.title.y =  element_blank(),panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank()) + scale_y_continuous(breaks = c(-0.8,-0.4,0,0.4,0.8),limits = c(-0.9,0.9)) + ggtitle("IUpred")
##SPOT##
yeastSeqSpot_diso <- Biostrings::AAStringSet(yeastDiso_full$spot_disoSeq)
yeastCompSpot<-colSums(alphabetFrequency(yeastSeqSpot_diso))[1:20]/sum(colSums(alphabetFrequency(yeastSeqSpot_diso))[1:20])
yeastSpotDiffComp <- sort((yeastCompSpot-yeastComp_all)/yeastComp_all,decreasing = T)
plotYeastSpot_DC <- ggplot()+geom_bar(aes(x=reorder(names(yeastSpotDiffComp),-yeastSpotDiffComp), fill=reorder(names(yeastSpotDiffComp),-yeastSpotDiffComp), y=yeastSpotDiffComp),stat="identity") + scale_fill_manual(values=colorPallete_YeastComp)+ theme_linedraw(base_size = 15) + theme(legend.position="none",axis.title.x =  element_blank(),axis.title.y =  element_blank(),panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank()) + scale_y_continuous(breaks = c(-0.8,-0.4,0,0.4,0.8),limits = c(-0.9,0.9)) + ggtitle("SPOT")
##VSL##
yeastSeqVsl_diso <- Biostrings::AAStringSet(yeastDiso_full$vsl_disoSeq)
yeastCompVsl<-colSums(alphabetFrequency(yeastSeqVsl_diso))[1:20]/sum(colSums(alphabetFrequency(yeastSeqVsl_diso))[1:20])
yeastVslDiffComp <- sort((yeastCompVsl-yeastComp_all)/yeastComp_all,decreasing = T)
plotYeastVsl_DC <- ggplot()+geom_bar(aes(x=reorder(names(yeastVslDiffComp),-yeastVslDiffComp), fill=reorder(names(yeastVslDiffComp),-yeastVslDiffComp), y=yeastVslDiffComp),stat="identity") + scale_fill_manual(values=colorPallete_YeastComp)+ theme_linedraw(base_size = 15) + theme(legend.position="none",axis.title.x =  element_blank(),axis.title.y =  element_blank(),panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank()) + scale_y_continuous(breaks = c(-0.8,-0.4,0,0.4,0.8),limits = c(-0.9,0.9)) + ggtitle("VSL2B")
fig<-ggarrange(plotYeastComp,plotYeastIupred_DC,plotYeastSpot_DC,plotYeastVsl_DC,ncol = 1)
annotate_figure(fig,left = text_grob("Comp. Disorder - Comp. Universe / Comp. Universe", rot = 90,size = 16))
# Main figure 4F
#___Yeast Intersection USING IUPRED LONG___
# adding number of consensus in total and in disorder
yeastIntersectMinCons <- sapply(yeastIntersect_All_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(yeastIntersectMinCons) <- NULL
expct_yeastIntersectMinCons <- yeastIntersectMinCons*(yeastIntersect_All_data$iupl_perc/100)
obsv_yeastIntersectMinCons <- sapply(yeastIntersect_All_data$iupl_disoSeq,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(obsv_yeastIntersectMinCons) <- NULL
yeastIntersect_iupl_obsVSexp_data <- as.data.frame(cbind(expct_yeastIntersectMinCons,obsv_yeastIntersectMinCons,yeastIntersect_All_data$target_intersect))
colnames(yeastIntersect_iupl_obsVSexp_data) <-c("expected","observed","target")
yeastIntersect_iupl_obsVSexp_data$expected <- as.numeric(yeastIntersect_iupl_obsVSexp_data$expected)
yeastIntersect_iupl_obsVSexp_data$observed <- as.numeric(yeastIntersect_iupl_obsVSexp_data$observed)
ggplot(yeastIntersect_iupl_obsVSexp_data) +
geom_point(aes(x=observed,y=expected,color=target),size=2,alpha=0.6)+
geom_abline(color="darkslategrey",slope = 1,size=1,linetype = "dashed")+
ggpubr::theme_classic2() +
theme(text = element_text(size=17),legend.position = "none") +
scale_x_continuous(limits = c(0, 30),breaks = c(seq(0, 30, by = 5)))+ xlab("Observed [S/T]P in IDR") +
scale_y_continuous(limits = c(0, 30),breaks = c(seq(0, 30, by = 5)))+ ylab("Expected [S/T]P in IDR")
# yeastIntersectFullCons <- sapply(yeastIntersect_All_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P.[KR]",x),use.names = F)
#                                                       if (index[1]==-1) {return(0)
#                                                       } else {return(length(index))}})
# names(yeastIntersectFullCons) <- NULL
#___human USING IUPRED LONG___
# adding number of consensus in total and in disorder
humanMinCons <- sapply(human_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(humanMinCons) <- NULL
expct_humanMinCons <- humanMinCons*(human_data$iupl_perc/100)
obsv_humanMinCons <- sapply(human_data$iupl_disoSeq,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(obsv_humanMinCons) <- NULL
human_iupl_obsVSexp_data <- as.data.frame(cbind(expct_humanMinCons,obsv_humanMinCons,human_data$target))
colnames(human_iupl_obsVSexp_data) <-c("expected","observed","target")
human_iupl_obsVSexp_data$expected <- as.numeric(human_iupl_obsVSexp_data$expected)
human_iupl_obsVSexp_data$observed <- as.numeric(human_iupl_obsVSexp_data$observed)
human_iupl_obsVSexp_data$target <- as.factor(human_iupl_obsVSexp_data$target)
ggplot(human_iupl_obsVSexp_data) +
geom_point(aes(x=observed,y=expected,color=target),size=2,alpha=0.5)+
geom_abline(color="darkslategrey",slope = 1,size=1,linetype = "dashed")+
ggpubr::theme_classic2() +
theme(text = element_text(size=17),legend.position = "none") +
scale_x_continuous(limits = c(0, 30),breaks = c(seq(0, 30, by = 5)))+ xlab("Observed [S/T]P in IDR") +
scale_y_continuous(limits = c(0, 30),breaks = c(seq(0, 30, by = 5)))+ ylab("Expected [S/T]P in IDR")
# humanFullCons <- sapply(human_All_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P.[KR]",x),use.names = F)
#                                                       if (index[1]==-1) {return(0)
#                                                       } else {return(length(index))}})
# names(humanFullCons) <- NULL
#___xenopus USING IUPRED LONG___
# adding number of consensus in total and in disorder
xenopusMinCons <- sapply(xenopus_data$Sequence,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(xenopusMinCons) <- NULL
expct_xenopusMinCons <- xenopusMinCons*(xenopus_data$iupl_perc/100)
obsv_xenopusMinCons <- sapply(xenopus_data$iupl_disoSeq,function(x){index<-unlist(gregexpr("[ST]P",x),use.names = F)
if (index[1]==-1) {return(0)
} else {return(length(index))}})
names(obsv_xenopusMinCons) <- NULL
xenopus_iupl_obsVSexp_data <- as.data.frame(cbind(expct_xenopusMinCons,obsv_xenopusMinCons,xenopus_data$target))
colnames(xenopus_iupl_obsVSexp_data) <-c("expected","observed","target")
# I should think how to define the universe: universe all proteins in holt in ubersax and CDK1 target only the ones that both techniques discovers a valid???
##### Violion Plot version###########
yeastIntersect_disoPerc_cols_idx <-grep("_perc",colnames(yeastIntersect_All_data))
yeastIntersect_reshaped_disoPerc <- melt(yeastIntersect_All_data[,yeastIntersect_disoPerc_cols_idx])
colnames(yeastIntersect_reshaped_disoPerc) <- c("Predictor","Percentage of disorder")
yeastIntersect_reshaped_disoPerc$target <- rep(yeastIntersect_All_data$target_intersect,length(yeastIntersect_disoPerc_cols_idx))
yeastIntersect_reshaped_disoPerc$target<- relevel(as.factor(yeastIntersect_reshaped_disoPerc$target),ref="Non Cdk1 target")
yeastIntersect_reshaped_disoPerc$Predictor <- factor(as.character(yeastIntersect_reshaped_disoPerc$Predictor),levels =  c("pfilt_perc","seg_perc","dis465_perc","disHL_perc","espD_perc","espN_perc","espX_perc","glo_perc","iupl_perc","iups_perc","jronn_perc","vsl_perc","spot_perc"))
ggplot(yeastIntersect_reshaped_disoPerc,aes(x=Predictor, y=`Percentage of disorder`)) +
geom_violin(aes(fill=target),position=position_dodge(0.9),bw=7,alpha=1,trim = F) +
geom_boxplot(aes(fill=target),position=position_dodge(0.9),width=0.10,outlier.size = 0.0001) +
ggpubr::theme_classic2() +
theme(
text = element_text(size=20),
legend.position = "none",legend.title = element_blank(),
axis.ticks.x = element_blank(),panel.grid.major.y = element_line(colour = "grey",linetype = "dashed"),axis.text.x =element_text(angle=45, hjust = 1)
) +
scale_y_continuous(limits = c(-20, 135), breaks = c(seq(0, 100, by = 20))) +
scale_x_discrete(labels = c("Pfilt", "SEG","DisEMBL-465","DisEMBL-HotLoops","ESpritz-DisProt","ESpritz-NMR","ESpritz-Xray","GlobPlot","IUPred-Long","IUPred-Short","JRONN","VSL2b","SPOT")) + xlab(NULL) +
scale_fill_manual(values = pal_jco()(10)[c(5,2)]) +
scale_color_manual(values = pal_jco()(10)[c(10,7)],guide=FALSE)
# Main Figure 4E
yeastIntersect_reshaped_disoPerc_figure <-  subset(yeastIntersect_reshaped_disoPerc,(Predictor=="iupl_perc")|(Predictor=="vsl_perc")|(Predictor=="spot_perc"))
yeastIntersect_reshaped_disoPerc_figure$Predictor <-
factor(yeastIntersect_reshaped_disoPerc_figure$Predictor, c("iupl_perc","spot_perc","vsl_perc"))
ggplot(yeastIntersect_reshaped_disoPerc_figure,aes(x=Predictor, y=`Percentage of disorder`)) +
geom_violin(aes(fill=target,color=target),position=position_dodge(0.9),bw=10,alpha=1,trim = F) +
geom_boxplot(aes(color=target),position=position_dodge(0.9),width=0.4,outlier.size = 0.0001) +
ggpubr::theme_classic2() +
theme(text = element_text(size=20),legend.position = "bottom",legend.title = element_blank(),axis.ticks.x = element_blank(),panel.grid.major.y = element_line(colour = "grey",linetype = "dashed")) +
scale_y_continuous(limits = c(-20, 135), breaks = c(seq(0, 100, by = 20))) +
scale_x_discrete(labels = c("IUPred", "SPOT","VSL2b")) + xlab(NULL) +
geom_segment(aes(x = 0.75, y = 133, xend = 1.25, yend = 133)) + annotate(geom="text", x=1, y=135, label="***") +
geom_segment(aes(x = 1.75, y = 133, xend = 2.25, yend = 133)) + annotate(geom="text", x=2, y=135, label="***") +
geom_segment(aes(x = 2.75, y = 133, xend = 3.25, yend = 133)) + annotate(geom="text", x=3, y=135, label="***") +
scale_fill_manual(values = pal_jco()(10)[c(5,2)]) +
scale_color_manual(values = pal_jco()(10)[c(10,7)],guide=FALSE)
yeastIntersect_reshaped_disoPerc_figure$target <- relevel(yeastIntersect_reshaped_disoPerc_figure$target,ref="Cdk1 target")
wilcox.test(`Percentage of disorder`~target,data=yeastIntersect_reshaped_disoPerc_figure,subset = Predictor=="iupl_perc",conf.int=TRUE)
wilcox.test(`Percentage of disorder`~target,data=yeastIntersect_reshaped_disoPerc_figure,subset = Predictor=="spot_perc",conf.int=TRUE)
yeastIntersect_reshaped_disoPerc_figure
yeastIntersect_All_data$spot_disoIndexes
yeastIntersect_All_data$spot_disoIndexes
yeastIntersect_All_data$spot_perc
humanDiso_full$spot_disoIndexes
# Libraries required
library(jsonlite)
library(readr)
library(ggplot2)
library(GGally)
library(vcd)
library(kableExtra)
library(ggpubr)
# library(Rcpi)
#if fails => sudo R CMD javareconf; reinstall; reboot R
library(Biostrings)
library(eulerr)
library(flextable)
library(stringr)
library(DT)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(reshape2)
library(AnnotationDbi)
library(ggridges)
library(hrbrthemes)
library(ggrepel)
library(ggsci)
library(scales)
# load the function for obtaining disorder metrics from diferent predictors
source("auxiliary_functions/getDisorder_V2.R")
# load function to generate contingency tables from phosphorylation data
source("auxiliary_functions/contingencyTablesAnalysis_V2.R")
#################################
######## Disorder data ##########
#################################
# ___________Disorder_____________
# YEAST
yeastDiso<-stream_in(con = file("disorder_data/MobiDB/yeast_mobiDB_full.mjson"),verbose = F)
yeastDiso$mobidb_data <- yeastDiso$mobidb_data$disorder
colnames(yeastDiso)[2] <- "disorder"
yeast_uniprot_table <- read_delim("uniprot_data/yeast_UniprotID_reviewed.tab", "\t", escape_double = FALSE, trim_ws = TRUE)
yeastDiso <- merge.data.frame(yeastDiso,yeast_uniprot_table,by.x = "acc",by.y = "Entry")
yeastDiso_full <- getMobiDB_PredDiso(yeastDiso,"acc",sequence_col = "Sequence")
